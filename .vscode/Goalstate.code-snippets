{
	// Place your scr workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"gs_callback": {
		"scope": "python",
		"prefix": "gs_, def gs_",
		"body": [
			"def gs_(slot):",
			"\t# type: (GoalSlot)->int",
			"\treturn 1"
		],
		"description": "goalstate callback"
	},

	"create_control_scheme": {
		"scope": "python",
		"prefix": "create_, def create_",
		"body": [
			"def create_():",
			"\tdef gs_init(slot):",
			"\t\t#type: (GoalSlot)->int",
			"\t\treturn 1",
			"\tcs = ControlScheme()",
			"\tcs.__set_stages__([",
			"\t  GoalStateStart(gs_init, ('STAGE', 100),('end', 100) ),",
			"\t  GoalState(),",
			"\t  GoalStateEnd(gs_wait_cb, ('end', 100), ),",
			"\t])",
			"\treturn cs"
		],
		"description": "control scheme generator"
	}
}